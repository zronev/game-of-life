{"version":3,"sources":["../../core/spawner/spawner.ts","../../core/grid/utils/utils.ts","../../core/grid/utils/index.ts","../../core/grid/implementations/grid-from-cells.ts","../../core/grid/implementations/grid-from-options.ts","../../core/grid/implementations/index.ts","../../core/grid/index.ts","../../core/utils/utils.ts","../../core/utils/index.ts","../../core/spawner/implementations/random-spawner.ts","../../core/spawner/implementations/pattern-spawner.ts","../../core/spawner/implementations/index.ts","../../core/spawner/spawners.ts","../../core/spawner/index.ts","../../core/rules/rules.ts","../../core/rules/index.ts","../../core/event-emitter/event-emitter.ts","../../core/event-emitter/index.ts","../../core/loop/loop.ts","../../core/loop/index.ts","../../core/field/field.ts","../../core/field/index.ts","../../core/generation/generation.ts","../../core/generation/index.ts","../../core/game/game.ts","../../core/game/index.ts","../../core/options/constants.ts","../../core/options/options.ts","../../core/options/index.ts","../../ui/vanilla/common/mvc/view.ts","../../ui/vanilla/common/utility/render-canvas.ts","../../ui/vanilla/common/utility/render-paragraph.ts","../../ui/vanilla/common/utility/render-wrapper.ts","../../ui/vanilla/common/utility/index.ts","../../ui/vanilla/info/view.ts","../../ui/vanilla/common/mvc/model.ts","../../ui/vanilla/info/model.ts","../../ui/vanilla/info/controller.ts","../../ui/vanilla/info/index.ts","../../ui/vanilla/common/mvc/index.ts","../../ui/common/drawers/implementations/grid.ts","../../ui/common/drawers/utility.ts","../../ui/common/drawers/implementations/colony.ts","../../ui/common/drawers/implementations/preview.ts","../../ui/common/drawers/implementations/index.ts","../../ui/common/drawers/index.ts","../../ui/vanilla/layers/layer/view.ts","../../ui/vanilla/layers/grid/view.ts","../../ui/vanilla/layers/layer/model.ts","../../ui/vanilla/layers/grid/model.ts","../../ui/vanilla/layers/grid/controller.ts","../../ui/vanilla/layers/grid/index.ts","../../ui/vanilla/layers/colony/view.ts","../../ui/vanilla/layers/colony/model.ts","../../ui/vanilla/layers/colony/controller.ts","../../ui/vanilla/layers/colony/index.ts","../../ui/common/utility/is-equal-points.ts","../../ui/common/utility/position-on-element.ts","../../ui/common/utility/shift-to-bottom-left-corner.ts","../../ui/common/utility/index.ts","../../ui/common/layers/draw-preview.ts","../../ui/vanilla/layers/preview/view.ts","../../ui/vanilla/layers/preview/model.ts","../../ui/common/layers/constant.ts","../../ui/vanilla/layers/preview/controller.ts","../../ui/vanilla/layers/preview/index.ts","../../ui/vanilla/game-field/view.ts","../../ui/vanilla/game-field/model.ts","../../ui/vanilla/game-field/controller.ts","../../ui/vanilla/game-field/index.ts","../../patterns/data.ts","../../patterns/index.ts","../../ui/vanilla/patterns/controller.ts","../../ui/vanilla/patterns/model.ts","../../ui/common/patterns/constant.ts","../../ui/vanilla/patterns/pattern.ts","../../ui/vanilla/patterns/view.ts","../../ui/vanilla/patterns/index.ts","../../ui/vanilla/controls/controller.ts","../../ui/vanilla/controls/model.ts","../../ui/vanilla/controls/view.ts","../../ui/vanilla/controls/index.ts","../../ui/common/shortcuts/constant.ts","../../ui/common/shortcuts/shortcuts.ts","../../ui/common/shortcuts/index.ts","../../ui/vanilla/shortcuts/index.ts","../../ui/vanilla/patterns/pattern-to-spawn.ts","../../ui/vanilla/app.ts","index.ts"],"names":[],"mappings":"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","file":"vanilla.72194d97.js","sourceRoot":"../../src/app/vanilla","sourcesContent":["import type { Field } from '../field'\n\nabstract class Spawner {\n  constructor(protected _field: Field) {}\n\n  public abstract spawn(...args: unknown[]): void\n}\n\nexport default Spawner\n","import type { Cells, Grid, Sides } from '../types'\n\nexport const createCells = ({ rows, columns }: Sides): Cells => {\n  return Array(rows)\n    .fill([])\n    .map(() => Array(columns).fill(false))\n}\n\nexport const getMaxSides = (cells: Cells): Sides => {\n  const maxColumns = cells.reduce((acc, cur) => Math.max(cur.length, acc), 0)\n\n  return { rows: cells.length, columns: maxColumns }\n}\n\nexport const getUsedCells = (grid: Grid): number => {\n  const { rows, columns, cells } = grid\n  let count = 0\n\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < columns; x++) {\n      const isCellAlive = cells[y][x]\n      count = isCellAlive ? count + 1 : count\n    }\n  }\n\n  return count\n}\n\nexport const getAvailableCells = (grid: Grid): number => {\n  const maxAmount = grid.rows * grid.columns\n  const usedCells = getUsedCells(grid)\n\n  return maxAmount - usedCells\n}\n\nexport const fillCells = (cells: Cells, sides: Sides): Cells => {\n  const { rows, columns } = sides\n  const newCells = createCells(sides)\n\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < columns; x++) {\n      const isCellAlive = cells[y]?.[x] ?? false\n      newCells[y][x] = isCellAlive\n    }\n  }\n\n  return newCells\n}\n\nexport const getDefaultAmount = (grid: Grid, occupancyRate = 0.15): number => {\n  const { rows, columns } = grid\n  return Math.floor(rows * columns * occupancyRate)\n}\n\nexport const countNeighbours = (cells: Cells, x: number, y: number): number => {\n  let neighbours = 0\n\n  for (let i = -1; i < 2; i++) {\n    for (let j = -1; j < 2; j++) {\n      const isOriginalCell = i === 0 && j === 0\n      if (isOriginalCell) continue\n\n      const isCellAlive = cells[y + i]?.[x + j]\n      if (isCellAlive) neighbours++\n    }\n  }\n\n  return neighbours\n}\n","export * from './utils'\n","import type { Cells, Grid } from '../types'\nimport { getMaxSides } from '../utils'\n\nexport class GridFromCells implements Grid {\n  private _rows: number\n  private _columns: number\n  private _cells: Cells\n\n  constructor(cells: Cells) {\n    const { rows, columns } = getMaxSides(cells)\n\n    this._rows = rows\n    this._columns = columns\n    this._cells = cells\n  }\n\n  get cells(): Cells {\n    return this._cells\n  }\n\n  get rows(): number {\n    return this._rows\n  }\n\n  get columns(): number {\n    return this._columns\n  }\n}\n","import { createCells } from '../utils'\nimport type { Cells, Grid, Sides } from '../types'\n\nexport class GridFromOptions implements Grid {\n  private _rows: number\n  private _columns: number\n  private _cells: Cells\n\n  constructor(sides: Sides) {\n    this._rows = sides.rows\n    this._columns = sides.columns\n    this._cells = createCells(sides)\n  }\n\n  get cells(): Cells {\n    return this._cells\n  }\n\n  get rows(): number {\n    return this._rows\n  }\n\n  get columns(): number {\n    return this._columns\n  }\n}\n","export * from './grid-from-cells'\nexport * from './grid-from-options'\n","export * from './types'\nexport * from './utils'\nexport * from './implementations'\n","export const getRandomValue = (min: number, max: number): number => {\n  const ceiledMin = Math.ceil(min)\n  const flooredMax = Math.floor(max)\n  return Math.floor(Math.random() * (flooredMax - ceiledMin + 1)) + ceiledMin\n}\n\nexport const clone2DArray = <T>(arr: T[][]): T[][] => {\n  const len = arr.length\n  const copy = new Array(len)\n\n  for (let i = 0; i < len; ++i) {\n    copy[i] = arr[i].slice()\n  }\n\n  return copy\n}\n\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(value, max))\n}\n","export * from './utils'\n","import Spawner from '../spawner'\nimport { GridFromCells, getAvailableCells } from '../../grid'\nimport { clone2DArray, clamp, getRandomValue } from '../../utils'\n\nclass RandomSpawner extends Spawner {\n  public spawn(amount: number): void {\n    const { grid } = this._field\n    const cellsCopy = clone2DArray(grid.cells)\n\n    const availableCells = getAvailableCells(grid)\n    const resultAmount = clamp(amount, 0, availableCells)\n\n    let count = 0\n    while (count < resultAmount) {\n      const point = this._getRandomCellCoordinate()\n      const isCellUsed = cellsCopy[point.y][point.x]\n\n      if (isCellUsed) continue\n\n      cellsCopy[point.y][point.x] = true\n      count++\n    }\n\n    this._field.grid = new GridFromCells(cellsCopy)\n  }\n\n  private _getRandomCellCoordinate(): Point {\n    const { rows, columns } = this._field.grid\n\n    return {\n      x: getRandomValue(0, rows - 1),\n      y: getRandomValue(0, columns - 1),\n    }\n  }\n}\n\nexport default RandomSpawner\n","import Spawner from '../spawner'\nimport { Grid, GridFromCells } from '../../grid'\nimport { clone2DArray } from '../../utils'\n\nclass PatternSpawner extends Spawner {\n  public spawn(pattern: Grid, offset: Point): void {\n    if (this._isValidPattern(pattern)) this._placeInGrid(pattern, offset)\n  }\n\n  private _isValidPattern(pattern: Grid): boolean {\n    const { rows, columns } = this._field.grid\n    return pattern.rows <= rows && pattern.columns <= columns\n  }\n\n  private _placeInGrid(pattern: Grid, offset: Point) {\n    const { rows, columns, cells } = this._field.grid\n    const cellsCopy = clone2DArray(cells)\n\n    for (let y = 0; y < pattern.rows; y++) {\n      for (let x = 0; x < pattern.columns; x++) {\n        const cellY = y + offset.y\n        const cellX = x + offset.x\n\n        const isBeyondBorder =\n          cellY < 0 || cellX < 0 || cellY >= rows || cellX >= columns\n\n        if (isBeyondBorder) continue\n\n        const isCellAlive = pattern.cells[y][x]\n\n        if (isCellAlive) cellsCopy[cellY][cellX] = isCellAlive\n      }\n    }\n\n    this._field.grid = new GridFromCells(cellsCopy)\n  }\n}\n\nexport default PatternSpawner\n","export { default as RandomSpawner } from './random-spawner'\nexport { default as PatternSpawner } from './pattern-spawner'\n","import type { Field } from '../field'\nimport { Grid, getDefaultAmount } from '../grid'\nimport { PatternSpawner, RandomSpawner } from '.'\n\nexport class Spawners {\n  private _randomSpawner: RandomSpawner\n  private _patternSpawner: PatternSpawner\n\n  constructor(private _field: Field) {\n    this._randomSpawner = new RandomSpawner(_field)\n    this._patternSpawner = new PatternSpawner(_field)\n  }\n\n  public randomSpawn(amount?: number): void {\n    const defaultAmount = getDefaultAmount(this._field.grid)\n    this._randomSpawner.spawn(amount || defaultAmount)\n  }\n\n  public patternSpawn(pattern: Grid, offset: Point): void {\n    this._patternSpawner.spawn(pattern, offset)\n  }\n}\n","export * from './implementations'\nexport * from './spawners'\n","import type { Rules } from './types'\n\nexport const applyClassicRules: Rules = (cell, neighbours) => {\n  if (cell && (neighbours < 2 || neighbours > 3)) return false\n  if (!cell && neighbours === 3) return true\n  return cell\n}\n","export * from './types'\nexport * from './rules'\n","type EventMap = Record<string, unknown>\ntype EventKey<T extends EventMap> = string & keyof T\ntype EventListener<T> = (params: T) => void\n\nexport class Emitter<T extends EventMap> {\n  private _events: Map<EventKey<T>, Set<EventListener<T[any]>>> = new Map()\n\n  public addListener<K extends EventKey<T>>(\n    eventName: K,\n    listener: EventListener<T[K]>\n  ): void {\n    const listenersByEventName = this._events.get(eventName)\n\n    if (!listenersByEventName) {\n      this._events.set(eventName, new Set([listener]))\n      return\n    }\n\n    if (listenersByEventName.has(listener)) {\n      return\n    }\n\n    this._events.set(eventName, listenersByEventName.add(listener))\n  }\n\n  public removeListener<K extends EventKey<T>>(\n    eventName: K,\n    listener: EventListener<T[K]>\n  ): void {\n    this._events.get(eventName)?.delete(listener)\n  }\n\n  public dispatch<K extends EventKey<T>>(eventName: K, params: T[K]): void {\n    const listeners = this._events.get(eventName)\n    listeners?.forEach(listener => {\n      listener(params)\n    })\n  }\n}\n","export * from './event-emitter'\n","import { Emitter } from '../event-emitter'\nimport { clamp } from '../utils'\n\nexport type LoopEventMap = {\n  FPS_CHANGED: number\n  PLAYBACK_CHANGED: boolean\n}\n\nexport class Loop {\n  private _minFps = 1\n  private _maxFps = 60\n  private _running = false\n  private _requestId: Nullable<number> = null\n  private _eventEmitter: Emitter<LoopEventMap>\n\n  constructor(private _fps: number, private _step: () => void) {\n    this._eventEmitter = new Emitter()\n  }\n\n  public start(): void {\n    if (this._requestId) return\n\n    let lastFrameTimeMs = 0\n\n    const gameLoop = (timestamp: number) => {\n      if (timestamp < lastFrameTimeMs + 1000 / this._fps) {\n        this._requestId = window.requestAnimationFrame(gameLoop)\n        return\n      }\n\n      lastFrameTimeMs = timestamp\n\n      this._step()\n      this._requestId = window.requestAnimationFrame(gameLoop)\n    }\n\n    this._requestId = window.requestAnimationFrame(gameLoop)\n    this._setRunning(true)\n  }\n\n  public pause(): void {\n    if (!this._requestId) return\n\n    window.cancelAnimationFrame(this._requestId)\n\n    this._requestId = null\n    this._setRunning(false)\n  }\n\n  public get eventEmitter(): Emitter<LoopEventMap> {\n    return this._eventEmitter\n  }\n\n  public toggle(): void {\n    this.running ? this.pause() : this.start()\n  }\n\n  public get running(): boolean {\n    return this._running\n  }\n\n  public get minFps(): number {\n    return this._minFps\n  }\n\n  public get maxFps(): number {\n    return this._maxFps\n  }\n\n  public get fps(): number {\n    return this._fps\n  }\n\n  public set fps(value: number) {\n    this._fps = clamp(value, this.minFps, this.maxFps)\n    this._eventEmitter.dispatch('FPS_CHANGED', this._fps)\n  }\n\n  public changeFpsBy(value: number): void {\n    this.fps = this.fps + value\n  }\n\n  private _setRunning(value: boolean) {\n    this._running = value\n    this._eventEmitter.dispatch('PLAYBACK_CHANGED', this._running)\n  }\n}\n","export * from './loop'\n","import { Grid, GridFromOptions } from '../grid'\nimport { Emitter } from '../event-emitter'\n\nexport type FieldEventMap = {\n  GRID_CHANGED: Grid\n}\n\nexport class Field {\n  private _eventEmitter: Emitter<FieldEventMap>\n\n  constructor(private _grid: Grid) {\n    this._eventEmitter = new Emitter()\n  }\n\n  public get eventEmitter(): Emitter<FieldEventMap> {\n    return this._eventEmitter\n  }\n\n  public get grid(): Grid {\n    return this._grid\n  }\n\n  public set grid(newGrid: Grid) {\n    this._grid = newGrid\n    this._eventEmitter.dispatch('GRID_CHANGED', this._grid)\n  }\n\n  public clear(): void {\n    const { rows, columns } = this._grid\n    this.grid = new GridFromOptions({ rows, columns })\n  }\n}\n","export * from './field'\n","import type { Field } from '../field'\nimport type { Rules } from '../rules'\n\nimport { clone2DArray } from '../utils'\nimport { Emitter } from '../event-emitter'\nimport { countNeighbours, GridFromCells } from '../grid'\n\nexport type GenerationEventMap = {\n  GENERATION_CHANGED: Generation\n}\n\nexport class Generation {\n  private _eventEmitter: Emitter<GenerationEventMap>\n\n  constructor(private _field: Field, private _applyRules: Rules) {\n    this._eventEmitter = new Emitter()\n  }\n\n  public next(): void {\n    this._changeGenerationOnGrid()\n    this._eventEmitter.dispatch('GENERATION_CHANGED', this)\n  }\n\n  public get eventEmitter(): Emitter<GenerationEventMap> {\n    return this._eventEmitter\n  }\n\n  private _changeGenerationOnGrid() {\n    const { grid } = this._field\n    const { rows, columns, cells } = grid\n\n    const cellsCopy = clone2DArray(cells)\n\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < columns; x++) {\n        const isCellAlive = cellsCopy[y][x]\n        const neighbours = countNeighbours(cells, x, y)\n        cellsCopy[y][x] = this._applyRules(isCellAlive, neighbours)\n      }\n    }\n\n    this._field.grid = new GridFromCells(cellsCopy)\n  }\n}\n","export * from './generation'\n","import { Spawners } from '../spawner'\nimport { applyClassicRules } from '../rules'\nimport { Loop, LoopEventMap } from '../loop'\nimport { Field, FieldEventMap } from '../field'\nimport { Generation, GenerationEventMap } from '../generation'\nimport { fillCells, GridFromCells, GridFromOptions, Sides } from '../grid'\n\nimport type { Emitter } from '../event-emitter'\n\ntype EventsMaps = {\n  loop: LoopEventMap\n  field: FieldEventMap\n  generation: GenerationEventMap\n}\n\ntype EmittersMap = {\n  [K in keyof EventsMaps]: Emitter<EventsMaps[K]>\n}\n\nexport class Game {\n  private _loop: Loop\n  private _field: Field\n  private _spawners: Spawners\n  private _generation: Generation\n  private _eventsEmitters: EmittersMap\n\n  constructor(fieldSides: Sides) {\n    this._field = new Field(new GridFromOptions(fieldSides))\n    this._generation = new Generation(this._field, applyClassicRules)\n    this._spawners = new Spawners(this._field)\n    this._loop = new Loop(30, () => this.step())\n\n    this._eventsEmitters = {\n      loop: this._loop.eventEmitter,\n      field: this._field.eventEmitter,\n      generation: this._generation.eventEmitter,\n    }\n  }\n\n  public step(): void {\n    this._generation.next()\n  }\n\n  public get loop(): Loop {\n    return this._loop\n  }\n\n  public get spawners(): Spawners {\n    return this._spawners\n  }\n\n  public changeFieldSize(sides: Sides): void {\n    const newCells = fillCells(this._field.grid.cells, sides)\n    this._field.grid = new GridFromCells(newCells)\n  }\n\n  public clearField(): void {\n    this._field.clear()\n  }\n\n  public getEmitter<T extends keyof EventsMaps>(\n    emitterName: T\n  ): EmittersMap[T] {\n    return this._eventsEmitters[emitterName]\n  }\n}\n","export * from './game'\n","export const FIELD_SIDES = {\n  small: 25,\n  normal: 50,\n  big: 100,\n  large: 125,\n}\n\nexport type FieldSide = keyof typeof FIELD_SIDES\n","import type { Sides } from '../grid'\nimport type { Size } from './types'\nimport { Emitter } from '../event-emitter'\nimport { FieldSide, FIELD_SIDES } from './constants'\n\ntype OptionsEvents = {\n  FIELD_SIDES_CHANGED: OptionsMap\n}\n\ntype OptionsProps = {\n  fieldSides: Sides\n  canvasSize: Size\n  color: string\n  cellSize?: number\n}\n\nexport type OptionsMap = {\n  eventsEmitter: Emitter<OptionsEvents>\n} & Required<OptionsProps>\n\nexport class Options {\n  private _fieldSides: Sides\n  private _canvasSize: Size\n  private _color: string\n  private _cellSize: number\n  private _eventsEmitter: Emitter<OptionsEvents>\n\n  constructor({ fieldSides, canvasSize, cellSize, color }: OptionsProps) {\n    this._fieldSides = fieldSides\n    this._canvasSize = canvasSize\n    this._color = color\n    this._cellSize = cellSize ?? this._getCellSize()\n    this._eventsEmitter = new Emitter()\n  }\n\n  public get eventsEmitter(): Emitter<OptionsEvents> {\n    return this._eventsEmitter\n  }\n\n  public get fieldSides(): Sides {\n    return this._fieldSides\n  }\n\n  public set fieldSides(newFieldSides: Sides) {\n    this._fieldSides = newFieldSides\n    this._cellSize = this._getCellSize()\n    this._eventsEmitter.dispatch('FIELD_SIDES_CHANGED', this.toMap())\n  }\n\n  public get canvasSize(): Size {\n    return this._canvasSize\n  }\n\n  public get cellSize(): number {\n    return this._cellSize\n  }\n\n  public get color(): string {\n    return this._color\n  }\n\n  public set color(newColor: string) {\n    this._color = newColor\n  }\n\n  public toMap(): OptionsMap {\n    return {\n      fieldSides: this.fieldSides,\n      canvasSize: this.canvasSize,\n      cellSize: this.cellSize,\n      color: this.color,\n      eventsEmitter: this.eventsEmitter,\n    }\n  }\n\n  public changeFieldSides(side: FieldSide): void {\n    this.fieldSides = {\n      rows: FIELD_SIDES[side],\n      columns: FIELD_SIDES[side],\n    }\n  }\n\n  private _getCellSize(): number {\n    return Math.floor(this._canvasSize.width / this._fieldSides.columns)\n  }\n}\n","export * from './constants'\nexport * from './options'\nexport * from './types'\n","import type { Model } from './model'\n\nexport abstract class View<State> {\n  constructor(\n    protected _targetElement: HTMLElement,\n    private _model: Model<State>\n  ) {\n    this.prepareRender = this.prepareRender.bind(this)\n    this.prepareRender()\n  }\n\n  public render(state: State): Nullable<DocumentFragment> {\n    return null\n  }\n\n  public destroy(): void {\n    this._targetElement.innerHTML = ''\n    this._unsubscribe()\n  }\n\n  public prepareRender(): void {\n    const { state } = this._model\n    const render = this.render(state)\n\n    if (render) {\n      this._targetElement.innerHTML = ''\n      this._targetElement.appendChild(render)\n    }\n  }\n\n  private _unsubscribe(): void {\n    const { eventsEmitter } = this._model\n    eventsEmitter.removeListener('MODEL_CHANGED', this.prepareRender)\n  }\n}\n","import type { Size } from '../../../../core/options'\n\nexport const renderCanvas = (\n  size: Size,\n  className: string\n): HTMLCanvasElement => {\n  const canvas = document.createElement('canvas')\n  canvas.width = size.width\n  canvas.height = size.height\n  canvas.classList.add('canvas', ...className.split(' '))\n\n  return canvas\n}\n","export const renderParagraph = (\n  text: string,\n  className: string\n): HTMLParagraphElement => {\n  const name = document.createElement('p')\n  name.classList.add(...className.split(' '))\n  name.textContent = text\n\n  return name\n}\n","export const renderWrapper = <K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  className: string\n): HTMLElementTagNameMap[K] => {\n  const wrapper = document.createElement(tag)\n  wrapper.classList.add(...className.split(' '))\n\n  return wrapper\n}\n","export * from './render-canvas'\nexport * from './render-paragraph'\nexport * from './render-wrapper'\n","import { View } from '../common/mvc/view'\nimport { renderParagraph } from '../common/utility'\nimport type { InfoState } from './types'\n\nexport class InfoView extends View<InfoState> {\n  public override render({ population, generation }: InfoState): DocumentFragment {\n    const fragment = document.createDocumentFragment()\n    const populationCounter = renderParagraph(`population: ${population}`, 'counter')\n    const generationCounter = renderParagraph(`generation: ${generation}`, 'counter')\n\n    fragment.append(populationCounter, generationCounter)\n    return fragment\n  }\n}\n","import { Emitter } from '../../../../core/event-emitter'\n\ntype ModelEvents<S> = {\n  MODEL_CHANGED: S\n}\n\nexport class Model<State> {\n  private _state: State\n  private _eventsEmitter: Emitter<ModelEvents<State>>\n\n  constructor(initialState: State) {\n    this._state = initialState\n    this._eventsEmitter = new Emitter()\n  }\n\n  public get state(): State {\n    return this._state\n  }\n\n  public set state(state: State) {\n    this._state = state\n    this._eventsEmitter.dispatch('MODEL_CHANGED', this.state)\n  }\n\n  public get eventsEmitter(): Emitter<ModelEvents<State>> {\n    return this._eventsEmitter\n  }\n}\n","import { Model } from '../common/mvc/model'\nimport { getUsedCells, Grid } from '../../../core/grid'\nimport type { InfoState } from './types'\nimport type { Game } from '../../../core/game'\n\nexport class InfoModel extends Model<InfoState> {\n  constructor(game: Game, initialState = { population: 0, generation: 0 }) {\n    super(initialState)\n    this._subscribeToExternalModel(game)\n  }\n\n  private _subscribeToExternalModel(game: Game): void {\n    const field = game.getEmitter('field')\n    field.addListener('GRID_CHANGED', (grid: Grid) => {\n      this.state = {\n        ...this.state,\n        population: getUsedCells(grid),\n      }\n    })\n\n    const generation = game.getEmitter('generation')\n    generation.addListener('GENERATION_CHANGED', () => {\n      this.state = {\n        ...this.state,\n        generation: this.state.generation + 1,\n      }\n    })\n  }\n}\n","import type { InfoView } from './view'\nimport type { InfoModel } from './model'\n\nexport class InfoController {\n  constructor(infoModel: InfoModel, infoView: InfoView) {\n    infoView.render(infoModel.state)\n    infoModel.eventsEmitter.addListener('MODEL_CHANGED', infoView.prepareRender)\n  }\n}\n","import type { Game } from '../../../core/game'\n\nimport { InfoView } from './view'\nimport { InfoModel } from './model'\nimport { InfoController } from './controller'\nimport { renderWrapper } from '../common/utility/render-wrapper'\n\nexport const renderInfo = (game: Game): HTMLElement => {\n  const infoWrapper = renderWrapper('section', 'info main__info')\n\n  const model = new InfoModel(game)\n  const view = new InfoView(infoWrapper, model)\n  new InfoController(model, view)\n\n  return infoWrapper\n}\n","export * from './model'\nexport * from './view'\n","import type { Layer } from '../../layers'\nimport type { OptionsMap } from '../../../../core/options'\n\nconst drawLine = (\n  context: CanvasRenderingContext2D,\n  start: Point,\n  end: Point,\n  color: string\n) => {\n  context.beginPath()\n  context.moveTo(start.x, start.y)\n  context.lineTo(end.x, end.y)\n  context.lineWidth = 0.25\n  context.strokeStyle = color\n  context.stroke()\n}\n\nexport const drawGrid = (layer: Layer, options: OptionsMap): void => {\n  const { context, cellSize } = layer\n  const { fieldSides, color } = options\n  const { rows, columns } = fieldSides\n\n  for (let y = 1; y < rows; y++) {\n    const start: Point = { x: 0, y: y * cellSize }\n    const end: Point = { x: columns * cellSize, y: y * cellSize }\n    drawLine(context, start, end, color)\n  }\n\n  for (let x = 1; x < columns; x++) {\n    const start: Point = { x: x * cellSize, y: 0 }\n    const end: Point = { x: x * cellSize, y: rows * cellSize }\n    drawLine(context, start, end, color)\n  }\n}\n","import type { Cell } from './types'\nimport type { Layer } from '../layers'\n\nexport const setFillColor = (\n  context: CanvasRenderingContext2D,\n  color: string\n): void => {\n  context.fillStyle = color\n}\n\nexport const drawCell = (\n  context: CanvasRenderingContext2D,\n  cell: Cell\n): void => {\n  context.fillRect(cell.x, cell.y, cell.side, cell.side)\n}\n\nexport const clear = ({ context, canvas }: Layer): void => {\n  context.clearRect(0, 0, canvas.width, canvas.height)\n}\n","import type { Layer } from '../../layers'\nimport type { Grid } from '../../../../core/grid'\nimport { drawCell } from '../utility'\n\nexport const drawColony = (grid: Grid, layer: Layer): void => {\n  const { context, cellSize } = layer\n  const { rows, columns, cells } = grid\n\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < columns; x++) {\n      const isCellAlive = cells[y][x]\n\n      if (!isCellAlive) continue\n\n      const cell = {\n        x: x * cellSize,\n        y: y * cellSize,\n        side: cellSize,\n      }\n\n      drawCell(context, cell)\n    }\n  }\n}\n","import type { Layer } from '../../layers'\nimport type { Grid } from '../../../../core/grid'\nimport { drawCell } from '../utility'\n\ntype DrawPreviewOptions = {\n  pattern: Grid\n  position: Point\n  layer: Layer\n}\n\nexport const drawPreview = ({\n  pattern,\n  position,\n  layer,\n}: DrawPreviewOptions): void => {\n  const { context, cellSize } = layer\n  const { rows, columns, cells } = pattern\n\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < columns; x++) {\n      const isCellAlive = cells[y][x]\n\n      if (!isCellAlive) continue\n\n      const cell = {\n        x: (x + position.x) * cellSize,\n        y: (y + position.y) * cellSize,\n        side: cellSize,\n      }\n\n      drawCell(context, cell)\n    }\n  }\n}\n","export * from './grid'\nexport * from './colony'\nexport * from './preview'\n","export * from './implementations'\nexport * from './utility'\nexport * from './types'\n","import type { LayerModel } from './model'\nimport type { LayerState } from './types'\nimport type { Layer } from '../../../common/layers'\nimport type { OptionsMap } from '../../../../core/options'\n\nimport { View } from '../../common/mvc/view'\nimport { setFillColor } from '../../../common/drawers'\n\nexport class LayerView<\n  State extends LayerState = LayerState\n> extends View<State> {\n  protected _layer: Nullable<Layer> = null\n  protected _canvas: HTMLCanvasElement\n\n  constructor(canvas: HTMLCanvasElement, model: LayerModel<State>) {\n    super(canvas, model)\n    this._canvas = canvas\n  }\n\n  public createLayer(options: OptionsMap): void {\n    const context = this._canvas.getContext('2d')\n\n    if (!context) {\n      throw new Error('Error occurs while getting the 2d context')\n    }\n\n    const { cellSize, color } = options\n    this._layer = { canvas: this._canvas, context, cellSize }\n\n    setFillColor(context, color)\n  }\n}\n","import type { OptionsMap } from '../../../../core/options'\n\nimport { LayerView } from '../layer/view'\nimport { clear, drawGrid } from '../../../common/drawers'\n\nexport class GridLayerView extends LayerView {\n  public draw(options: OptionsMap): void {\n    if (this._layer) {\n      clear(this._layer)\n      drawGrid(this._layer, options)\n    }\n  }\n}\n","import type { LayerState } from './types'\nimport type { Game } from '../../../../core/game'\nimport type { Sides } from '../../../../core/grid'\n\nimport { Model } from '../../common/mvc/model'\n\nexport class LayerModel<State extends LayerState = LayerState> extends Model<State> {\n  constructor(protected _game: Game, initialState: State) {\n    super(initialState)\n  }\n\n  public changeFieldSize(fieldSides: Sides): void {\n    this._game.changeFieldSize(fieldSides)\n  }\n}\n","import { LayerModel } from '../layer/model'\n\nexport class GridLayerModel extends LayerModel {}\n","import type { GridLayerModel } from './model'\nimport type { GridLayerView } from './view'\n\nexport class GridLayerController {\n  constructor(layerModel: GridLayerModel, layerView: GridLayerView) {\n    layerView.createLayer(layerModel.state.options)\n    this._subscribeToExternalModels(layerModel, layerView)\n  }\n\n  private _subscribeToExternalModels(\n    layerModel: GridLayerModel,\n    layerView: GridLayerView\n  ) {\n    const { state } = layerModel\n\n    layerView.draw(state.options)\n\n    state.options.eventsEmitter.addListener('FIELD_SIDES_CHANGED', options => {\n      layerModel.changeFieldSize(options.fieldSides)\n      layerView.createLayer(options)\n      layerView.draw(options)\n    })\n  }\n}\n","import { GridLayerView } from './view'\nimport { GridLayerModel } from './model'\nimport { GridLayerController } from './controller'\n\nimport type { Game } from '../../../../core/game'\nimport type { OptionsMap } from '../../../../core/options'\n\nexport const renderGridLayer = (\n  canvas: HTMLCanvasElement,\n  game: Game,\n  options: OptionsMap\n): HTMLCanvasElement => {\n  const model = new GridLayerModel(game, { options })\n  const view = new GridLayerView(canvas, model)\n  new GridLayerController(model, view)\n\n  return canvas\n}\n","import type { ColonyLayerState } from './types'\nimport type { ColonyLayerModel } from './model'\nimport type { Grid } from '../../../../core/grid'\nimport type { Layer } from '../../../common/layers'\n\nimport { LayerView } from '../layer/view'\n\nexport class ColonyLayerView extends LayerView<ColonyLayerState> {\n  private _draw: (layer: Layer, grid: Grid) => void\n\n  constructor(\n    canvas: HTMLCanvasElement,\n    model: ColonyLayerModel,\n    draw: (layer: Layer, grid: Grid) => void\n  ) {\n    super(canvas, model)\n    this._draw = draw\n  }\n\n  public draw(grid: Grid): void {\n    if (this._layer) this._draw(this._layer, grid)\n  }\n}\n","import type { Game } from '../../../../core/game'\nimport type { ColonyLayerState, GridHandler } from './types'\nimport { LayerModel } from '../layer/model'\n\nexport class ColonyLayerModel extends LayerModel<ColonyLayerState> {\n  constructor(\n    game: Game,\n    initialState: ColonyLayerState,\n    onGridChanged?: (callback: GridHandler) => void\n  ) {\n    super(game, initialState)\n\n    if (onGridChanged) {\n      onGridChanged(grid => {\n        this.state = { ...this.state, grid }\n      })\n    }\n  }\n}\n","import type { ColonyLayerModel } from './model'\nimport type { ColonyLayerView } from './view'\n\nexport class ColonyLayerController {\n  constructor(layerModel: ColonyLayerModel, layerView: ColonyLayerView) {\n    layerView.createLayer(layerModel.state.options)\n    layerView.draw(layerModel.state.grid)\n    this._subscribeToExternalModels(layerModel, layerView)\n  }\n\n  private _subscribeToExternalModels(\n    layerModel: ColonyLayerModel,\n    layerView: ColonyLayerView\n  ) {\n    const { state, eventsEmitter } = layerModel\n\n    state.options.eventsEmitter.addListener('FIELD_SIDES_CHANGED', options => {\n      layerModel.changeFieldSize(options.fieldSides)\n      layerView.createLayer(options)\n    })\n\n    eventsEmitter.addListener('MODEL_CHANGED', ({ grid }) =>\n      layerView.draw(grid)\n    )\n  }\n}\n","import type { Game } from '../../../../core/game'\nimport type { Layer } from '../../../common/layers'\nimport type { OptionsMap } from '../../../../core/options'\n\nimport { ColonyLayerView } from './view'\nimport { ColonyLayerModel } from './model'\nimport { ColonyLayerController } from './controller'\nimport { Grid, GridFromOptions } from '../../../../core/grid'\n\nexport const renderColonyLayer = (\n  canvas: HTMLCanvasElement,\n  game: Game,\n  options: OptionsMap,\n  draw: (layer: Layer, grid: Grid) => void,\n  onGridChanged?: (callback: (grid: Grid) => void) => void\n): HTMLCanvasElement => {\n  const initialState = {\n    options,\n    grid: new GridFromOptions(options.fieldSides),\n  }\n\n  const model = new ColonyLayerModel(game, initialState, onGridChanged)\n  const view = new ColonyLayerView(canvas, model, draw)\n  new ColonyLayerController(model, view)\n\n  return canvas\n}\n","export const isEqualPoints = (p1: Point, p2: Point): boolean => {\n  return p1.x === p2.x && p1.y === p2.y\n}\n","const mapCoordinate = (value: number, cellSize: number): number => {\n  return Math.floor(value / cellSize)\n}\n\nexport const positionOnElement = <\n  T extends { clientX: number; clientY: number }\n>({\n  event,\n  targetElementWidth,\n  element,\n  cellSize,\n}: {\n  event: T\n  targetElementWidth: number\n  element: HTMLElement\n  cellSize: number\n}): Point => {\n  const rect = element.getBoundingClientRect()\n  const scale = targetElementWidth / rect.width\n\n  const position: Point = {\n    x: scale * (event.clientX - rect.left),\n    y: scale * (event.clientY - rect.top),\n  }\n\n  const mappedPosition: Point = {\n    x: mapCoordinate(position.x, cellSize),\n    y: mapCoordinate(position.y, cellSize),\n  }\n\n  return mappedPosition\n}\n","import type { Grid } from '../../../core/grid'\n\nexport const shiftToBottomLeftCorner = (\n  { x, y }: Point,\n  { rows }: Grid\n): Point => ({\n  x,\n  y: y - rows + 1,\n})\n","export * from './is-equal-points'\nexport * from './position-on-element'\nexport * from './shift-to-bottom-left-corner'\n","import type { Layer } from './types'\nimport type { Pattern } from '../../../patterns'\n\nimport {\n  isEqualPoints,\n  positionOnElement,\n  shiftToBottomLeftCorner,\n} from '../utility'\nimport { clear, drawPreview } from '../drawers'\n\nexport const drawPreviewOnMouseMove = (\n  event: { clientX: number; clientY: number },\n  layer: Nullable<Layer>,\n  lastPosition: Point,\n  pattern: Pattern\n): void => {\n  if (!layer) return\n\n  const { canvas, cellSize } = layer\n  const { grid } = pattern\n\n  const position = positionOnElement({\n    event,\n    cellSize: cellSize,\n    element: canvas,\n    targetElementWidth: canvas.width,\n  })\n\n  if (isEqualPoints(lastPosition, position)) return\n  lastPosition = position\n\n  clear(layer)\n  drawPreview({\n    pattern: grid,\n    position: shiftToBottomLeftCorner(position, grid),\n    layer,\n  })\n}\n","import type { PreviewLayerState } from './types'\nimport type { Layer } from '../../../common/layers'\nimport type { PatternToSpawn } from '../../patterns/pattern-to-spawn'\n\nimport { LayerView } from '../layer/view'\nimport { clear } from '../../../common/drawers'\nimport { drawPreviewOnMouseMove } from '../../../common/layers/draw-preview'\n\nexport class PreviewLayerView extends LayerView<PreviewLayerState> {\n  private _lastPosition: Point = { x: -1, y: -1 }\n\n  public onMouseMove(pattern: PatternToSpawn): void {\n    const handleMouseMove = (event: MouseEvent) => {\n      drawPreviewOnMouseMove(\n        event,\n        this._layer,\n        this._lastPosition,\n        pattern.get()\n      )\n    }\n\n    this._canvas.addEventListener('mousemove', handleMouseMove)\n  }\n\n  public onMouseLeave(callback: (layer: Layer) => void): void {\n    const handleMouseLeave = () => {\n      if (this._layer) callback(this._layer)\n    }\n\n    this._canvas.addEventListener('mouseleave', handleMouseLeave)\n  }\n\n  public clear(): void {\n    if (this._layer) clear(this._layer)\n  }\n}\n","import type { PreviewLayerState } from './types'\nimport { LayerModel } from '../layer/model'\n\nexport class PreviewLayerModel extends LayerModel<PreviewLayerState> {}\n","export const PREVIEW_COLOR = 'rgba(45, 52, 54, 0.75)'\n","import type { PreviewLayerView } from './view'\nimport type { PreviewLayerModel } from './model'\nimport { clear } from '../../../common/drawers'\nimport { PREVIEW_COLOR } from '../../../common/layers/constant'\n\nexport class PreviewLayerController {\n  constructor(\n    private _layerModel: PreviewLayerModel,\n    private _layerView: PreviewLayerView\n  ) {\n    this._layerView.createLayer(this._layerModel.state.options)\n    this._subscribeToExternalModels()\n    this._subscribeToViewEvents()\n  }\n\n  private _subscribeToViewEvents() {\n    const { patternToSpawn } = this._layerModel.state\n    this._layerView.onMouseMove(patternToSpawn)\n    this._layerView.onMouseLeave(clear)\n  }\n\n  private _subscribeToExternalModels() {\n    const { options } = this._layerModel.state\n\n    options.eventsEmitter.addListener('FIELD_SIDES_CHANGED', options => {\n      const previewOptions = { ...options, color: PREVIEW_COLOR }\n      this._layerModel.changeFieldSize(options.fieldSides)\n      this._layerView.createLayer(previewOptions)\n      this._layerView.clear()\n    })\n  }\n}\n","import { PreviewLayerView } from './view'\nimport { PreviewLayerModel } from './model'\nimport { PreviewLayerController } from './controller'\n\nimport type { Game } from '../../../../core/game'\nimport type { OptionsMap } from '../../../../core/options'\nimport type { PatternToSpawn } from '../../patterns/pattern-to-spawn'\n\nexport const renderPreviewLayer = (\n  canvas: HTMLCanvasElement,\n  game: Game,\n  options: OptionsMap,\n  patternToSpawn: PatternToSpawn\n): HTMLCanvasElement => {\n  const initialState = { options, patternToSpawn }\n  const model = new PreviewLayerModel(game, initialState)\n  const view = new PreviewLayerView(canvas, model)\n  new PreviewLayerController(model, view)\n\n  return canvas\n}\n","import type { Grid } from '../../../core/grid'\nimport type { Layer } from '../../common/layers'\nimport type { GridHandler } from '../layers/colony/types'\nimport type { GameFieldState, MouseEventCallback } from './types'\n\nimport { View } from '../common/mvc'\nimport { renderCanvas } from '../common/utility'\nimport { clear, drawColony } from '../../common/drawers'\n\nimport { renderGridLayer } from '../layers/grid'\nimport { renderColonyLayer } from '../layers/colony'\nimport { renderPreviewLayer } from '../layers/preview'\nimport { PREVIEW_COLOR } from '../../common/layers/constant'\n\nexport class GameFieldView extends View<GameFieldState> {\n  private _isDrawing = false\n\n  public override render(state: GameFieldState): DocumentFragment {\n    const fragment = document.createDocumentFragment()\n\n    const colonyLayer = this._renderColonyLayer(state)\n    const gridLayer = this._renderGridLayer(state)\n    const previewLayer = this._renderPreviewLayer(state)\n\n    this._subscribeToMouseEvents()\n\n    fragment.append(colonyLayer, gridLayer, previewLayer)\n    return fragment\n  }\n\n  public get isDrawing(): boolean {\n    return this._isDrawing\n  }\n\n  public onClick(callback: MouseEventCallback): void {\n    this._targetElement.addEventListener('click', event =>\n      callback(event, this._targetElement)\n    )\n  }\n\n  public onMouseMove(callback: MouseEventCallback): void {\n    this._targetElement.addEventListener('mousemove', event =>\n      callback(event, this._targetElement)\n    )\n  }\n\n  private _subscribeToMouseEvents() {\n    this._targetElement.addEventListener('mousedown', () => {\n      this._isDrawing = true\n    })\n\n    this._targetElement.addEventListener('mouseup', () => {\n      this._isDrawing = false\n    })\n  }\n\n  private _renderColonyLayer({\n    game,\n    options,\n  }: GameFieldState): HTMLCanvasElement {\n    const onGridChanged = (callback: GridHandler) => {\n      const field = game.getEmitter('field')\n      field.addListener('GRID_CHANGED', callback)\n    }\n\n    const colonyCanvas = renderCanvas(options.canvasSize, 'colony-canvas')\n    return renderColonyLayer(\n      colonyCanvas,\n      game,\n      options,\n      this._drawColony,\n      onGridChanged\n    )\n  }\n\n  private _renderGridLayer({\n    game,\n    options,\n  }: GameFieldState): HTMLCanvasElement {\n    const gridCanvas = renderCanvas(options.canvasSize, 'grid-canvas')\n    return renderGridLayer(gridCanvas, game, options)\n  }\n\n  private _renderPreviewLayer({\n    game,\n    options,\n    patternToSpawn,\n  }: GameFieldState): HTMLCanvasElement {\n    const previewOptions = { ...options.toMap(), color: PREVIEW_COLOR }\n    const previewCanvas = renderCanvas(options.canvasSize, 'preview-canvas')\n    return renderPreviewLayer(\n      previewCanvas,\n      game,\n      previewOptions,\n      patternToSpawn\n    )\n  }\n\n  private _drawColony(layer: Layer, grid: Grid): void {\n    clear(layer)\n    drawColony(grid, layer)\n  }\n}\n","import { Model } from '../common/mvc'\nimport type { GameFieldState } from './types'\n\nexport class GameFieldModel extends Model<GameFieldState> {}\n","import type { GameFieldView } from './view'\nimport type { GameFieldModel } from './model'\nimport {\n  positionOnElement,\n  shiftToBottomLeftCorner,\n} from '../../common/utility'\n\nexport class GameFieldController {\n  constructor(private _model: GameFieldModel, private _view: GameFieldView) {\n    this._spawn = this._spawn.bind(this)\n\n    this._view.render(this._model.state)\n    this._subscribeToViewEvents()\n  }\n\n  private _subscribeToViewEvents() {\n    this._view.onClick(this._spawn)\n    this._view.onMouseMove((event, element) => {\n      if (this._view.isDrawing) this._spawn(event, element)\n    })\n  }\n\n  private _spawn(event: MouseEvent, element: HTMLElement) {\n    const { game, options, patternToSpawn } = this._model.state\n    const { cellSize, canvasSize } = options\n\n    const position = positionOnElement({\n      event,\n      element,\n      cellSize,\n      targetElementWidth: canvasSize.width,\n    })\n\n    const patternGrid = patternToSpawn.get().grid\n    const bottomLeftCorner = shiftToBottomLeftCorner(position, patternGrid)\n\n    game.spawners.patternSpawn(patternGrid, bottomLeftCorner)\n  }\n}\n","import type { Game } from '../../../core/game'\nimport type { Options } from '../../../core/options'\nimport type { PatternToSpawn } from '../patterns/pattern-to-spawn'\n\nimport { GameFieldView } from './view'\nimport { GameFieldModel } from './model'\nimport { GameFieldController } from './controller'\nimport { renderWrapper } from '../common/utility'\n\nexport const renderGameField = (\n  game: Game,\n  options: Options,\n  patternToSpawn: PatternToSpawn\n): HTMLElement => {\n  const gameFieldWrapper = renderWrapper('section', 'game main__game')\n\n  const model = new GameFieldModel({ game, options, patternToSpawn })\n  const view = new GameFieldView(gameFieldWrapper, model)\n  new GameFieldController(model, view)\n\n  return gameFieldWrapper\n}\n","import type { Pattern } from './types'\nimport { Cells, GridFromCells } from '../core/grid'\n\nconst data: Record<string, Cells> = {\n  // Custom\n  dot: [[true]],\n  // Still lifes\n  beehive: [\n    [false, true, true, false],\n    [true, false, false, true],\n    [true, false, false, true],\n    [false, true, true, false],\n  ],\n  loaf: [\n    [false, true, true, false],\n    [true, false, false, true],\n    [false, true, false, true],\n    [false, false, true, false],\n  ],\n  boat: [\n    [true, true, false],\n    [true, false, true],\n    [false, true, false],\n  ],\n  tub: [\n    [false, true, false],\n    [true, false, true],\n    [false, true, false],\n  ],\n  block: [\n    [true, true],\n    [true, true],\n  ],\n  ship: [\n    [true, true, false],\n    [true, false, true],\n    [false, true, true],\n  ],\n  // Oscillators\n  blinker: [[true, true, true]],\n  toad: [\n    [false, false, true, false],\n    [true, false, false, true],\n    [true, false, false, true],\n    [false, true, false, false],\n  ],\n  beacon: [\n    [false, false, true, true],\n    [false, false, true, true],\n    [true, true, false, false],\n    [true, true, false, false],\n  ],\n  //prettier-ignore\n  pulsar: [\n    [false, false, true, true, true, false, false, false , true, true , true, false, false],\n    [false, false, false, false, false, false, false, false, false , false, false, false],\n    [true, false, false, false, false, true, false, true, false , false, false, false, true],\n    [true, false, false, false, false, true, false, true, false , false, false, false, true],\n    [true, false, false, false, false, true, false, true, false , false, false, false, true],\n    [false, false, true, true, true, false, false, false, true , true, true, false, false],\n    [false, false, false, false, false, false, false, false, false , false, false, false],\n    [false, false, true, true, true, false, false, false, true, true , true, false, false],\n    [true, false, false, false, false, true, false, true, false, false, false, false, true],\n    [true, false, false, false, false, true, false, true, false, false, false, false, true],\n    [true, false, false, false, false, true, false, true, false, false, false, false, true],\n    [false, false, false, false, false, false, false, false, false, false, false, false, false],\n    [false, false, true, true, true, false, false, false, true, true, true, false, false],\n  ],\n  // Space Ships\n  glider: [\n    [true, true, true],\n    [true, false, false],\n    [false, true, false],\n  ],\n  // Special\n  'R pentimo': [\n    [false, true, true],\n    [true, true, false],\n    [false, true, false],\n  ],\n}\n\nexport const patternsByKey: Record<string, Pattern> = Object.entries(\n  data\n).reduce<Record<string, Pattern>>((acc, [name, cells]) => {\n  acc[name] = {\n    name,\n    grid: new GridFromCells(cells),\n  }\n\n  return acc\n}, {})\n\nexport const patterns: Pattern[] = Object.entries(data).map(\n  ([name, cells]) => ({\n    name,\n    grid: new GridFromCells(cells),\n  })\n)\n","export * from './types'\nexport * from './data'\n","import type { PatternsView } from './view'\nimport type { PatternsModel } from './model'\nimport type { PatternToSpawn } from './pattern-to-spawn'\nimport { patternsByKey } from '../../../patterns'\n\nexport class PatternsController {\n  constructor(\n    patternsModel: PatternsModel,\n    patternsView: PatternsView,\n    patternToSpawn: PatternToSpawn\n  ) {\n    patternsView.render(patternsModel.state)\n    patternsView.onClick(name => {\n      const pattern = patternsByKey[name]\n      if (pattern) patternToSpawn.set(pattern)\n    })\n  }\n}\n","import { Model } from '../common/mvc/model'\nimport type { PatternsState } from './types'\n\nexport class PatternsModel extends Model<PatternsState> {}\n","export const CELL_SIZE = 24\nexport const CELL_COLOR = '#2d3436'\nexport const GRID_COLOR = '#0984e3'\n","import type { Game } from '../../../core/game'\nimport type { Pattern } from '../../../patterns'\nimport type { Layer } from '../../common/layers'\n\nimport { Options, OptionsMap } from '../../../core/options'\nimport { renderGridLayer } from '../layers/grid'\nimport { renderColonyLayer } from '../layers/colony'\n\nimport {\n  CELL_COLOR,\n  CELL_SIZE,\n  GRID_COLOR,\n} from '../../common/patterns/constant'\nimport { clear, drawColony } from '../../common/drawers'\nimport { renderCanvas, renderParagraph, renderWrapper } from '../common/utility'\n\nconst renderColony = (game: Game, options: OptionsMap, pattern: Pattern) => {\n  const { canvasSize } = options\n\n  const draw = (layer: Layer) => {\n    clear(layer)\n    drawColony(pattern.grid, layer)\n  }\n\n  const colonyCanvas = renderCanvas(canvasSize, 'colony-canvas pattern__canvas')\n  return renderColonyLayer(colonyCanvas, game, options, draw)\n}\n\nconst renderGrid = (game: Game, options: OptionsMap) => {\n  const gridOptions = { ...options, color: GRID_COLOR }\n  const { canvasSize } = options\n\n  const gridCanvas = renderCanvas(canvasSize, 'grid-canvas pattern__canvas')\n  return renderGridLayer(gridCanvas, game, gridOptions)\n}\n\nexport const renderPattern = (pattern: Pattern, game: Game): HTMLElement => {\n  const options = new Options({\n    fieldSides: {\n      rows: pattern.grid.rows,\n      columns: pattern.grid.columns,\n    },\n    canvasSize: {\n      width: pattern.grid.columns * CELL_SIZE,\n      height: pattern.grid.rows * CELL_SIZE,\n    },\n    cellSize: CELL_SIZE,\n    color: CELL_COLOR,\n  }).toMap()\n\n  const colonyLayer = renderColony(game, options, pattern)\n  const gridLayer = renderGrid(game, options)\n  const layersWrapper = renderWrapper('div', 'relative-wrapper')\n  layersWrapper.append(colonyLayer, gridLayer)\n\n  const name = renderParagraph(pattern.name, 'pattern__name')\n  const patternWrapper = renderWrapper('div', 'pattern')\n  patternWrapper.append(layersWrapper, name)\n  patternWrapper.dataset.name = pattern.name\n\n  return patternWrapper\n}\n","import { View } from '../common/mvc/view'\nimport { renderPattern } from './pattern'\nimport type { PatternsState } from './types'\n\nexport class PatternsView extends View<PatternsState> {\n  public override render({\n    game,\n    patterns,\n    patternToSpawn,\n  }: PatternsState): DocumentFragment {\n    const patternsViews = patterns.map(pattern => renderPattern(pattern, game))\n    patternsViews.forEach(patternView => {\n      const name = patternView.dataset.name\n      const activePatternName = patternToSpawn.get().name\n\n      if (name === activePatternName) {\n        patternView.classList.add('pattern--active')\n      }\n    })\n\n    const fragment = document.createDocumentFragment()\n    fragment.append(...patternsViews)\n\n    return fragment\n  }\n\n  public onClick(callback: (name: string) => void): void {\n    this._targetElement.addEventListener('click', e => {\n      if (!(e.target instanceof HTMLElement)) return\n\n      const { name } = e.target.dataset\n\n      if (name) {\n        callback(name)\n\n        for (const child of this._targetElement.children) {\n          child.classList.remove('pattern--active')\n        }\n\n        e.target.classList.add('pattern--active')\n      }\n    })\n  }\n}\n","import type { Game } from '../../../core/game'\nimport { patterns } from '../../../patterns'\nimport { PatternsController } from './controller'\nimport { PatternsModel } from './model'\nimport type { PatternToSpawn } from './pattern-to-spawn'\nimport { PatternsView } from './view'\n\nexport const renderPatterns = (\n  game: Game,\n  patternToSpawn: PatternToSpawn\n): HTMLElement => {\n  const patternsWrapper = document.createElement('section')\n  patternsWrapper.classList.add('patterns-wrapper', 'main__patterns')\n\n  const innerWrapper = document.createElement('div')\n  innerWrapper.classList.add('patterns')\n\n  const model = new PatternsModel({ game, patterns, patternToSpawn })\n  const view = new PatternsView(innerWrapper, model)\n  new PatternsController(model, view, patternToSpawn)\n\n  patternsWrapper.appendChild(innerWrapper)\n  return patternsWrapper\n}\n","import type { ControlsView } from './view'\nimport type { ControlsModel } from './model'\n\nexport class ControlsController {\n  constructor(model: ControlsModel, view: ControlsView) {\n    view.render(model.state)\n    model.eventsEmitter.addListener('MODEL_CHANGED', view.prepareRender)\n    this._subscribeToViewEvents(model, view)\n  }\n\n  private _subscribeToViewEvents(model: ControlsModel, view: ControlsView) {\n    const { game, options } = model.state\n    const eventsHandler: Record<string, () => void> = {\n      spawn: () => game.spawners.randomSpawn(),\n      clear: () => game.clearField(),\n      playback: () => game.loop.toggle(),\n      faster: () => game.loop.changeFpsBy(5),\n      slower: () => game.loop.changeFpsBy(-5),\n      small: () => options.changeFieldSides('small'),\n      normal: () => options.changeFieldSides('normal'),\n      large: () => options.changeFieldSides('large'),\n      big: () => options.changeFieldSides('big'),\n    }\n\n    view.onClick(name => eventsHandler[name]())\n  }\n}\n","import type { OptionsMap } from '../../../core/options'\nimport type { ControlsState } from './types'\n\nimport { Model } from '../common/mvc/model'\n\nexport class ControlsModel extends Model<ControlsState> {\n  constructor(initialState: ControlsState) {\n    super(initialState)\n    this._subscribeToExternalModel(initialState)\n  }\n\n  private _subscribeToExternalModel(initialState: ControlsState): void {\n    const { game, options } = initialState\n\n    const loopEmitter = game.getEmitter('loop')\n    const optionsEmitter = options.eventsEmitter\n\n    const handleFps = (fps: number) => {\n      this.state = { ...this.state, fps }\n    }\n\n    const handleRunning = (running: boolean) => {\n      this.state = { ...this.state, running }\n    }\n\n    const handleSides = ({ fieldSides }: OptionsMap) => {\n      this.state = { ...this.state, fieldSides }\n    }\n\n    loopEmitter.addListener('FPS_CHANGED', handleFps)\n    loopEmitter.addListener('PLAYBACK_CHANGED', handleRunning)\n    optionsEmitter.addListener('FIELD_SIDES_CHANGED', handleSides)\n  }\n}\n","import { View } from '../common/mvc'\nimport { renderWrapper } from '../common/utility'\nimport { FIELD_SIDES } from '../../../core/options'\nimport type { ControlsState } from './types'\n\nexport class ControlsView extends View<ControlsState> {\n  public override render(state: ControlsState): DocumentFragment {\n    const fragment = document.createDocumentFragment()\n\n    const fieldRow = this._renderFieldRow()\n    const loopRow = this._renderLoopRow(state)\n    const sidesRow = this._renderSidesRow(state)\n\n    fragment.append(fieldRow, loopRow, sidesRow)\n    return fragment\n  }\n\n  public onClick(callback: (eventName: string) => void): void {\n    this._targetElement.addEventListener('click', event => {\n      if (!(event.target instanceof HTMLButtonElement)) return\n      const name = event.target.dataset.name\n      if (name) callback(name)\n    })\n  }\n\n  private _renderFieldRow(): HTMLElement {\n    const row = this._renderRow()\n\n    const spawnButton = this._renderButton({ text: 'spawn' })\n    const clearButton = this._renderButton({ text: 'clear' })\n\n    row.append(spawnButton, clearButton)\n    return row\n  }\n\n  private _renderLoopRow({ fps, running, game }: ControlsState): HTMLElement {\n    const row = this._renderRow()\n\n    const isMinFpsReached = fps === game.loop.minFps\n    const slowerButton = this._renderButton({\n      text: 'slower',\n      disabled: isMinFpsReached,\n    })\n\n    const playbackButton = this._renderButton({\n      text: running ? 'pause' : 'play',\n      eventName: 'playback',\n    })\n\n    const isMaxFpsReached = fps === game.loop.maxFps\n    const fasterButton = this._renderButton({\n      text: 'faster',\n      disabled: isMaxFpsReached,\n    })\n\n    row.append(slowerButton, playbackButton, fasterButton)\n    return row\n  }\n\n  private _renderSidesRow({ fieldSides }: ControlsState): HTMLElement {\n    const row = this._renderRow()\n\n    const buttons = Object.entries(FIELD_SIDES).map(([name, sides]) => {\n      const isActive = fieldSides.rows === sides\n      return this._renderButton({ text: name, disabled: isActive })\n    })\n\n    row.append(...buttons)\n    return row\n  }\n\n  private _renderRow(): HTMLElement {\n    return renderWrapper('div', 'row')\n  }\n\n  private _renderButton({\n    text,\n    eventName = text,\n    disabled = false,\n  }: {\n    text: string\n    eventName?: string\n    disabled?: boolean\n  }): HTMLButtonElement {\n    const button = document.createElement('button')\n    button.classList.add('button')\n    button.dataset.name = eventName\n    button.disabled = disabled\n    button.textContent = text\n    button.type = 'button'\n\n    return button\n  }\n}\n","import type { Game } from '../../../core/game'\nimport type { Options } from '../../../core/options'\nimport { renderWrapper } from '../common/utility'\nimport { ControlsController } from './controller'\nimport { ControlsModel } from './model'\nimport { ControlsView } from './view'\n\nexport const renderControls = (\n  game: Game,\n  options: Options\n): HTMLElement => {\n  const controlsWrapper = renderWrapper('section', 'controls main__controls')\n\n  const initialState = {\n    game,\n    options,\n    fps: game.loop.fps,\n    running: game.loop.running,\n    fieldSides: options.fieldSides,\n  }\n\n  const model = new ControlsModel(initialState)\n  const view = new ControlsView(controlsWrapper, model)\n  new ControlsController(model, view)\n\n  return controlsWrapper\n}\n","export const SHORTCUTS = [\n  { keys: ['s'], text: 'spawn random cells' },\n  { keys: ['c'], text: 'clear field' },\n  { keys: ['space'], text: 'pause/play' },\n  { keys: ['[', ']'], text: 'faster/slower' },\n  { keys: ['1', '2', '3', '4'], text: 'make field smaller/bigger' },\n]\n","import type { Game } from '../../../core/game'\nimport type { Options } from '../../../core/options'\n\nclass ShortcutsController {\n  static isKeysPressed: Record<string, boolean> = {\n    KeyS: false,\n    KeyC: false,\n    BracketLeft: false,\n    BracketRight: false,\n    ShiftLeft: false,\n    ShiftRight: false,\n    Space: false,\n    Digit1: false,\n    Digit2: false,\n    Digit3: false,\n    Digit4: false,\n  }\n\n  constructor(private _game: Game, private _options: Options) {}\n\n  public init(): void {\n    this._onKeyDown()\n    this._onKeyUp()\n  }\n\n  private _onKeyDown() {\n    document.addEventListener('keydown', e => {\n      ShortcutsController.isKeysPressed[e.code] = true\n\n      const isShiftPressed =\n        ShortcutsController.isKeysPressed.ShiftLeft ||\n        ShortcutsController.isKeysPressed.ShiftRight\n\n      if (ShortcutsController.isKeysPressed.Space) {\n        e.preventDefault()\n        this._game.loop.toggle()\n      }\n\n      if (ShortcutsController.isKeysPressed.KeyS) {\n        this._game.spawners.randomSpawn()\n      }\n\n      if (ShortcutsController.isKeysPressed.KeyC) {\n        this._game.clearField()\n      }\n\n      if (ShortcutsController.isKeysPressed.BracketLeft) {\n        isShiftPressed\n          ? this._game.loop.changeFpsBy(-1)\n          : this._game.loop.changeFpsBy(-5)\n      }\n\n      if (ShortcutsController.isKeysPressed.BracketRight) {\n        isShiftPressed\n          ? this._game.loop.changeFpsBy(1)\n          : this._game.loop.changeFpsBy(5)\n      }\n\n      if (ShortcutsController.isKeysPressed.Digit1) {\n        this._options.changeFieldSides('small')\n      }\n\n      if (ShortcutsController.isKeysPressed.Digit2) {\n        this._options.changeFieldSides('normal')\n      }\n\n      if (ShortcutsController.isKeysPressed.Digit3) {\n        this._options.changeFieldSides('big')\n      }\n\n      if (ShortcutsController.isKeysPressed.Digit4) {\n        this._options.changeFieldSides('large')\n      }\n    })\n  }\n\n  private _onKeyUp() {\n    document.addEventListener('keyup', e => {\n      ShortcutsController.isKeysPressed[e.code] = false\n    })\n  }\n}\n\nexport default ShortcutsController\n","export * from './constant'\nexport { default } from './shortcuts'\n","import { SHORTCUTS } from '../../common/shortcuts'\nimport { renderWrapper } from '../common/utility'\n\nconst renderListItemContent = (keys: string[]): string => {\n  return keys\n    .map((key, index) => {\n      const isLast = index === keys.length - 1\n\n      return `\n        <span>\n          <b class=\"shortcuts__key\">${key}</b>${isLast ? ' ' : ', '}\n        </span>`\n    })\n    .join('')\n}\n\nconst renderListItem = ({\n  keys,\n  text,\n}: {\n  keys: string[]\n  text: string\n}): string => {\n  return `\n    <li class=\"shortcuts__item\">\n      ${renderListItemContent(keys)} &ndash; ${text}\n    </li>`\n}\n\nexport const renderShortcuts = (): HTMLElement => {\n  const wrapper = renderWrapper('section', 'shortcuts main__shortcuts')\n  wrapper.innerHTML = `\n    <ul class=\"shortcuts__list\">\n      ${SHORTCUTS.map(renderListItem).join('')}\n    </ul>\n  `\n\n  return wrapper\n}\n","import { Emitter } from '../../../core/event-emitter'\nimport type { Pattern } from '../../../patterns'\n\ntype Events = {\n  PATTERN_CHANGED: Pattern\n}\n\nexport class PatternToSpawn {\n  private _eventsEmitter: Emitter<Events>\n\n  constructor(private _pattern: Pattern) {\n    this._eventsEmitter = new Emitter()\n  }\n\n  public get(): Pattern {\n    return this._pattern\n  }\n\n  public set(pattern: Pattern): void {\n    this._pattern = pattern\n    this._eventsEmitter.dispatch('PATTERN_CHANGED', this._pattern)\n  }\n\n  public get eventsEmitter(): Emitter<Events> {\n    return this._eventsEmitter\n  }\n}\n","import type { Game } from '../../core/game'\nimport type { Options } from '../../core/options'\n\nimport { renderInfo } from './info'\nimport { renderGameField } from './game-field'\nimport { renderPatterns } from './patterns'\nimport { renderControls } from './controls'\nimport { renderShortcuts } from './shortcuts'\nimport { renderWrapper } from './common/utility/render-wrapper'\n\nimport ShortcutsController from '../common/shortcuts'\nimport { patterns } from '../../patterns/data'\nimport { PatternToSpawn } from './patterns/pattern-to-spawn'\n\nconst renderApp = (game: Game, options: Options) => {\n  const rootElement = document.getElementById('root')\n\n  if (!rootElement) {\n    throw new Error('Wrong selector for the root element')\n  }\n\n  const patternToSpawn = new PatternToSpawn(patterns[0])\n\n  const info = renderInfo(game)\n  const shortcutsInfo = renderShortcuts()\n  const controls = renderControls(game, options)\n  const patternsSection = renderPatterns(game, patternToSpawn)\n  const gameField = renderGameField(game, options, patternToSpawn)\n\n  const mainWrapper = renderWrapper('main', 'main')\n  mainWrapper.append(info, gameField, controls, patternsSection, shortcutsInfo)\n  rootElement.appendChild(mainWrapper)\n}\n\nexport const app = (game: Game, options: Options): void => {\n  renderApp(game, options)\n\n  game.loop.start()\n  game.spawners.randomSpawn()\n\n  const shortcuts = new ShortcutsController(game, options)\n  shortcuts.init()\n}\n","import { Game } from '../../core/game'\nimport { Options } from '../../core/options'\nimport { app } from '../../ui/vanilla/app'\n\nconst options = new Options({\n  fieldSides: {\n    rows: 50,\n    columns: 50,\n  },\n  canvasSize: {\n    width: 1000,\n    height: 1000,\n  },\n  color: '#2d3436',\n})\n\nconst game = new Game(options.fieldSides)\n\napp(game, options)\n"]}